AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an EC2 AutoScaling Groups, Public Load balancer, and Security Groups required for the entire deployment.
Parameters:
  StackUUID:
    Description: Stack UUID
    Type: String
  EFSSG:
    Description: EFS security group
    Type: String
  DatabaseSecurityGroup:
    Description: Database security group
    Type: String
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Type: String
  PrivateSubnetOne:
    Description: Private subnet 1 in the VPC.
    Type: String
  PrivateSubnetTwo:
    Description: Private subnet 2 in the VPC.
    Type: String
  PublicSubnetOne:
    Description: Private subnet 1 in the VPC.
    Type: String
  PublicSubnetTwo:
    Description: Private subnet 2 in the VPC.
    Type: String
  EC2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  ECSClusterName:
    Description: ECS Cluster name
    Type: String
    Default: Cluster
  MaxInstanceCount:
    Type: Number
    Default: 10
    Description: How many copies of the service task to run
  DesiredInstanceCount:
    Type: Number
    Default: 1
    Description: How many instances to run in the ECS Cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, c4.large, c4.xlarge,
                    m5.large, m5.xlarge]
    ConstraintDescription: Please choose a valid instance type.

Mappings:
  InstanceCpuMem:
    t2.nano:
      CPU: 1024
      Memory: 470
    t2.micro:
      CPU: 1024
      Memory: 920
    t2.small:
      CPU: 1024
      Memory: 1840
    t2.medium:
      CPU: 2048
      Memory: 3700
    t2.large:
      CPU: 2048
      Memory: 7300
    m5.large:
      CPU: 2048
      Memory: 7300
    m5.xlarge:
      CPU: 4096
      Memory: 14700
    c4.large:
      CPU: 2048
      Memory: 3500
    c4.xlarge:
      CPU: 4096
      Memory: 13800

Resources:

  # One public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services.
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPCId'
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']


  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPCId'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'EC2SecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
  # Allow ingress from ECS containers into EFS file systems
  NFSSecurityGroupIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: NFS ingress from ECS containers
      GroupId: !Ref 'EFSSG'
      IpProtocol: "-1"
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
  EC2SecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'EC2SecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  # Allow ingress traffic from ecs containers into RDS DB
  DatabaseSecurityGroupIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: RDS ingress from ecs containers
      GroupId: !Ref 'DatabaseSecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'EC2SecurityGroup'
  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnetOne'
        - !Ref 'PrivateSubnetTwo'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      DesiredCapacity: !Ref 'DesiredInstanceCount'
      MaxSize: !Ref 'MaxInstanceCount'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'EC2AMI'
      SecurityGroups:
        - !Ref 'EC2SecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: '*'

Outputs:
  AutoscalingRole:
    Description: AutoScaling role
    Value: !Ref 'AutoscalingRole'
    Export:
      Name: !Sub
        - ${StackUUID}:AutoscalingRolez
        - { StackUUID: !Ref 'StackUUID' }
  AutoscalingRoleARN:
    Description: AutoScaling role ARN
    Value: !GetAtt AutoscalingRole.Arn
    Export:
      Name: !Sub
        - ${StackUUID}:AutoscalingRoleARN
        - { StackUUID: !Ref 'StackUUID' }
  AutoScalingGroup:
    Description: AutoScaling group
    Value: !Ref 'AutoScalingGroup'
    Export:
      Name: !Sub
        - ${StackUUID}:AutoScalingGroup
        - { StackUUID: !Ref 'StackUUID' }
  EC2SecurityGroup:
    Description: Security group for EC2 instances
    Value: !Ref 'EC2SecurityGroup'
    Export:
      Name: !Sub
        - ${StackUUID}:EC2SecurityGroup
        - { StackUUID: !Ref 'StackUUID' }
  PublicLoadBalancerSG:
    Description: Security group for public load balancer
    Value: !Ref 'PublicLoadBalancerSG'
    Export:
      Name: !Sub
        - ${StackUUID}:PublicLoadPublicLoadBalancerSGBalancer
        - { StackUUID: !Ref 'StackUUID' }
  PublicLoadBalancer:
    Description: Public load balancer
    Value: !Ref 'PublicLoadBalancer'
    Export:
      Name: !Sub
        - ${StackUUID}:PublicLoadBalancer
        - { StackUUID: !Ref 'StackUUID' }
        
  InstanceType:
    Description: EC2 instance types
    Value: !Ref 'InstanceType'
    Export:
      Name: !Sub
        - ${StackUUID}:InstanceType
        - { StackUUID: !Ref 'StackUUID' }
        
  InstanceMemory:
    Description: EC2 instance memory
    Value: !FindInMap [InstanceCpuMem, !Ref 'InstanceType', Memory]
    Export:
      Name: !Sub
        - ${StackUUID}:InstanceMemory
        - { StackUUID: !Ref 'StackUUID' }
        
  InstanceCPU:
    Description: EC2 instance CPU
    Value: !FindInMap [InstanceCpuMem, !Ref 'InstanceType', CPU]
    Export:
      Name: !Sub
        - ${StackUUID}:InstanceCPU
        - { StackUUID: !Ref 'StackUUID' }
  PublicLoadBalancerDNSName:
    Description: Public load balancer DNS name
    Value: !Sub "${PublicLoadBalancer.DNSName}"
    Export:
      Name: !Sub
        - ${StackUUID}:PublicLoadBalancerDNSName
        - { StackUUID: !Ref 'StackUUID' }

