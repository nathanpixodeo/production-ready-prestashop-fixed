AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an elastic container service that will run Prestashop containers on registered instances in our cluster.
Parameters:
  StackUUID:
    Description: Stack UUID
    Type: String
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Type: String
  ImgEFS:
    Description: Prestashop img folder EFS.
    Type: String
  CacheEFS:
    Description: Prestashop cache folder EFS.
    Type: String
  OverrideEFS:
    Description: Prestashop override folder EFS.
    Type: String
  ThemeEFS:
    Description: Prestashop theme folder EFS.
    Type: String
  ConfigEFS:
    Description: Prestashop config folder EFS.
    Type: String
  ModulesEFS:
    Description: Prestashop modules folder EFS.
    Type: String
  PublicLoadBalancerDNSName:
    Description: Public load balancer DNS name.
    Type: String
  DatabaseName:
    Description: Prestashop database name.
    Type: String
  DatabasePassword:
    Description: Prestashop database password.
    Type: String
  DatabaseUsername:
    Description: Prestashop database username.
    Type: String
  DatabaseEndpoint: 
    Description: Prestashop database server.
    Type: String
  PublicLoadBalancer:
    Description: Public load balancer.
    Type: String
  InstanceCPU:
    Description: EC2 Instance CPU
    Type: Number
  InstanceMemory:
    Description: EC2 Instance memory
    Type: Number
  ECSClusterName:
    Description: ECS Cluster name
    Type: String
    Default: Cluster
  DesiredTaskCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run.
  ImageUrl:
    Type: String
    Default: prestashop/prestashop:1.7-7.0
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service

Resources:
  # ECS Logs Group
  LogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: prestashop-awslogs
      RetentionInDays: 30

  # ECS Resources
  Cluster:
    Type: AWS::ECS::Cluster
    DeletionPolicy: "Retain"
    Properties:
      ClusterName: !Ref 'ECSClusterName'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref 'InstanceCPU'
      Memory: !Ref 'InstanceMemory'
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-Container"
          Cpu: !Ref 'InstanceCPU'
          Memory: !Ref 'InstanceMemory'
          Image: !Ref 'ImageUrl'
          MountPoints:
            - ContainerPath: /var/www/html/img
              SourceVolume: ImgEFS
            - ContainerPath: /var/www/html/modules
              SourceVolume: ModulesEFS
            - ContainerPath: /var/www/html/cache
              SourceVolume: CacheEFS
            - ContainerPath: /var/www/html/theme
              SourceVolume: ThemeEFS
            - ContainerPath: /var/www/html/app/config
              SourceVolume: ConfigEFS
            - ContainerPath: /var/www/html/override
              SourceVolume: OverrideEFS
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsGroup
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: prestashop-ecs
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: DB_PASSWD
              Value: !Ref 'DatabasePassword'
            - Name: DB_SERVER
              Value: !Ref 'DatabaseEndpoint'
            - Name: DB_USER
              Value: !Ref 'DatabaseUsername'
            - Name: PS_INSTALL_AUTO
              Value: "1"
            - Name: DB_NAME
              Value: !Ref 'DatabaseName'
            - Name: PS_COUNTRY
              Value: CA
            - Name: PS_ALL_LANGUAGES
              Value: "0"
            - Name: PS_HANDLE_DYNAMIC_DOMAIN
              Value: "1"
            - Name: PS_PREFIX
              Value: ps_
            # PS_ERASE_DB needs to be set to 1 if no DB exists. Afterwards, it should be set to 0
            - Name: PS_ERASE_DB
              Value: "1"
            - Name: PS_DOMAIN
              Value: !Ref 'PublicLoadBalancerDNSName'
            - Name: PS_FOLDER_INSTALL
              Value: installer
            - Name: PS_FOLDER_ADMIN
              Value: administration
            - Name: PS_ENABLE_SSL
              Value: "1"
      Volumes:
        - Name : ImgEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'ImgEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'ImgEFS'
            Labels:
              Name: ImgEFS
            Scope: task
        - Name: CacheEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'CacheEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'CacheEFS'
            Labels:
              Name: CacheEFS
            Scope: task
        - Name: ThemeEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'ThemeEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'ThemeEFS'
            Labels:
              Name: ThemeEFS
            Scope: task
        - Name: ModulesEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'ModulesEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'ModulesEFS'
            Labels:
              Name: ModulesEFS
            Scope: task
        - Name: OverrideEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'OverrideEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'OverrideEFS'
            Labels:
              Name: OverrideEFS
            Scope: task
        - Name: ConfigEFS
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device:
                Fn::Sub:
                  - "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
                  - FileSystem: !Ref 'ConfigEFS'
              o:
                Fn::Sub:
                  - "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
                  - FileSystem: !Ref 'ConfigEFS'
            Labels:
              Name: ConfigEFS
            Scope: task

  # The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerRule
    Properties:
      ServiceName: !Sub "${AWS::StackName}-Service"
      Cluster: !Ref 'Cluster'
      DesiredCount: !Ref 'DesiredTaskCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-Container"
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /index.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      Matcher:
        HttpCode: "200-302"
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 8
      VpcId: !Ref 'VPCId'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "3600"

Outputs:
  Service:
    Description: The ECS service
    Value: !Ref 'Service'
    Export: 
      Name: !Sub
        - ${StackUUID}:Service
        - { StackUUID: !Ref 'StackUUID' }
  ServiceName:
    Description: Name of the ECS service
    Value: !GetAtt Service.Name
    Export: 
      Name: !Sub
        - ${StackUUID}:ServiceName
        - { StackUUID: !Ref 'StackUUID' }
  Cluster:
    Description: The ECS cluster
    Value: !Ref 'Cluster'
    Export: 
      Name: !Sub
        - ${StackUUID}:Cluster
        - { StackUUID: !Ref 'StackUUID' }
